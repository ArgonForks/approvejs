{"version":3,"sources":["approve.js"],"names":["root","factory","define","amd","approve","exports","module","this","Result","approved","errors","each","callback","isFunc","constructor","call","apply","i","length","Score","strength","points","isMinimum","hasLower","hasUpper","hasNumber","hasSpecial","isBonus","percent","valid","VERSION","tests","required","validate","value","message","expects","email","regex","test","url","cc","alphaNumeric","numeric","alpha","decimal","currency","ip","ipv4","ipv6","min","pars","max","range","equal","format","Object","prototype","toString","_format","text","col","Array","slice","arguments","replace","m","n","trim","_start","rules","rule","hasOwnProperty","title","constraint","params","_test","result","args","_getArgs","ret","concat","_formatMessages","prop","push","_formatMessage","_eachExpected","fn","isArray","expectsLength","config","_getFormat","addTest","obj","name","e","minimum","minimumBonus","strengths","0","1","2","3","4","5","6","score","match","Math","ceil","bonus","messages"],"mappings":"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","file":"approve.min.js","sourcesContent":["/**\n * approve.js v1.0.0\n * A simple validation library that doesn't interfere.\n * Author: Charl Gottschalk\n * @license: MIT\n */\n\n/** @namespace approve */\n;(function(root, factory) {    // eslint-disable-line no-extra-semi\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(function() {\n            // Also create a global in case some scripts\n            // that are loaded still are looking for\n            // a global even when an AMD loader is in use.\n            return (root.approve = factory());\n        });\n    } else if (typeof exports === 'object') {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like enviroments that support module.exports,\n        // like Node.\n        module.exports = factory();\n    } else {\n        // Browser globals (root is self)\n        root.approve = factory();\n    }\n}(this, function(root) {\n    /**\n     * The result object returned by the <code>approve.value()</code> method.\n     * @memberOf approve\n     * @ignore\n     */\n    function Result() {\n        this.approved = true;\n        this.errors = [];\n        // Provides easy access to the loop for the errors.\n        this.each = function(callback) {\n            var isFunc = callback && callback.constructor && callback.call && callback.apply,\n                i = this.errors.length;\n            while (i--) {\n                if (isFunc) {\n                    callback(this.errors[i]);\n                }\n            }\n        };\n    }\n\n    /** @constructor */\n    var approve = {};\n\n    /** \n     * ApproveJs version\n     * @memberOf approve\n     * @ignore\n     */\n    approve.VERSION = '1.0.0';\n\n    /**\n     * Default tests.<br>\n     * Each test has at least three members.<br>\n     * <code>validate()</code> - the method which is called when testing a value.<br>\n     * <code>message</code> - the property that holds the default error message.<br>\n     * <code>expects</code> - the property that is either false if the test expects no parameters, or an array of strings representing the names of the expected parameters.<br>\n     * Each test either returns a boolean or an object.\n     * @memberOf approve\n     * @namespace approve.tests\n     */\n    approve.tests = {\n        /**\n         * Checks if a value is present.\n         * @example\n         * approve.value('some value', {required: true});\n         * @function required\n         * @memberOf approve.tests\n         * @inner\n         */\n        required: {\n            validate: function(value) {\n                return !!value;\n            },\n            message: '{title} is required',\n            expects: false\n        },\n        /**\n         * Checks if a value is a valid email address.\n         * @example\n         * approve.value('some value', {email: true});\n         * @function email\n         * @memberOf approve.tests\n         * @inner\n         */\n        email: {\n            regex: /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i, // eslint-disable-line no-control-regex\n            validate: function(value) {\n                return this.regex.test(value);\n            },\n            message: '{title} must be a valid email address',\n            expects: false\n        },\n        /**\n         * Checks if a value is a valid web address.\n         * @example\n         * approve.value('some value', {url: true});\n         * @function url\n         * @memberOf approve.tests\n         * @inner\n         */\n        url: {\n            regex: /^(?:(?:https?|ftp):\\/\\/)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/\\S*)?$/i,\n            validate: function(value) {\n                return this.regex.test(value);\n            },\n            message: '{title} must be a valid web address',\n            expects: false\n        },\n        /**\n         * Checks if a value is a valid credit card number.\n         * @example\n         * approve.value('some value', {cc: true});\n         * @function cc\n         * @memberOf approve.tests\n         * @inner\n         */\n        cc: {\n            regex: /^(?:(4[0-9]{12}(?:[0-9]{3})?)|(5[1-5][0-9]{14})|(6(?:011|5[0-9]{2})[0-9]{12})|(3[47][0-9]{13})|(3(?:0[0-5]|[68][0-9])[0-9]{11})|((?:2131|1800|35[0-9]{3})[0-9]{11}))$/,\n            validate: function(value) {\n                return this.regex.test(value);\n            },\n            message: '{title} must be a valid credit card number',\n            expects: false\n        },\n        /**\n         * Checks if a value contains both letters and numbers.\n         * @example\n         * approve.value('some value', {alphaNumeric: true});\n         * @function alphaNumeric\n         * @memberOf approve.tests\n         * @inner\n         */\n        alphaNumeric: {\n            regex: /^[A-Za-z0-9]+$/i,\n            validate: function(value) {\n                return this.regex.test(value);\n            },\n            message: '{title} may only contain [A-Za-z] and [0-9]',\n            expects: false\n        },\n        /**\n         * Checks if a value contains only numbers.\n         * @example\n         * approve.value('some value', {numeric: true});\n         * @function numeric\n         * @memberOf approve.tests\n         * @inner\n         */\n        numeric: {\n            regex: /^[0-9]+$/,\n            validate: function(value) {\n                return this.regex.test(value);\n            },\n            message: '{title} may only contain [0-9]',\n            expects: false\n        },\n        /**\n         * Checks if a value contains only letters.\n         * @example\n         * approve.value('some value', {alpha: true});\n         * @function alpha\n         * @memberOf approve.tests\n         * @inner\n         */\n        alpha: {\n            regex: /^[A-Za-z]+$/,\n            validate: function(value) {\n                return this.regex.test(value);\n            },\n            message: '{title} may only contain [A-Za-z]',\n            expects: false\n        },\n        /**\n         * Checks if a value is a valid decimal.\n         * @example\n         * approve.value('some value', {decimal: true});\n         * @function decimal\n         * @memberOf approve.tests\n         * @inner\n         */\n        decimal: {\n            regex: /^\\s*(\\+|-)?((\\d+(\\.\\d+)?)|(\\.\\d+))\\s*$/,\n            validate: function(value) {\n                return this.regex.test(value);\n            },\n            message: '{title} must be a valid decimal',\n            expects: false\n        },\n        /**\n         * Similar to 'decimal', but for currency values.\n         * @example\n         * approve.value('some value', {currency: true});\n         * @function currency\n         * @memberOf approve.tests\n         * @inner\n         */\n        currency: {\n            regex: /^\\s*(\\+|-)?((\\d+(\\.\\d\\d)?)|(\\.\\d\\d))\\s*$/,\n            validate: function(value) {\n                return this.regex.test(value);\n            },\n            message: '{title} must be a valid currency value',\n            expects: false\n        },\n        /**\n         * Checks if a value is a valid ipv4 or ipv6 address.\n         * @example\n         * approve.value('some value', {ip: true});\n         * @function ip\n         * @memberOf approve.tests\n         * @inner\n         */\n        ip: {\n            regex: {\n                ipv4: /^(?:(?:\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])\\.){3}(?:\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])$/,\n                ipv6: /^((?=.*::)(?!.*::.+::)(::)?([\\dA-F]{1,4}:(:|\\b)|){5}|([\\dA-F]{1,4}:){6})((([\\dA-F]{1,4}((?!\\3)::|:\\b|$))|(?!\\2\\3)){2}|(((2[0-4]|1\\d|[1-9])?\\d|25[0-5])\\.?\\b){4})$/i\n            },\n            validate: function(value) {\n                return this.regex.ipv4.test(value) || this.regex.ipv6.test(value);\n            },\n            message: '{title} must be a valid IP address',\n            expects: false\n        },\n        /**\n         * Checks if a value is a minimum of n characters.\n         * @param {Integer} min - The minimum allowed length.\n         * @example\n         * approve.value('some value', {min: 5});\n         * @function min\n         * @memberOf approve.tests\n         * @inner\n         */\n        min: {\n            validate: function(value, pars) {\n                return typeof value === 'string' && value.length >= pars.min;\n            },\n            message: '{title} must be a minimum of {min} characters',\n            expects: ['min']\n        },\n        /**\n         * Checks if a value is a maximum of n characters.\n         * @param {Integer} max - The maximum allowed length.\n         * @example\n         * approve.value('some value', {max: 20});\n         * @function max\n         * @memberOf approve.tests\n         * @inner\n         */\n        max: {\n            validate: function(value, pars) {\n                return typeof value === 'string' && value.length <= pars.max;\n            },\n            message: '{title} must be a maximum of {max} characters',\n            expects: ['max']\n        },\n        /**\n         * Checks if a value's length is between a minimum and maximum.\n         * @param {Integer} min - The minimum allowed length.\n         * @param {Integer} max - The maximum allowed length.\n         * @example\n         * var rule = {\n         *     range: {\n         *         min: 5,\n         *         max: 20\n         *     }\n         * };\n         * approve.value('some value', rule);\n         * @function range\n         * @memberOf approve.tests\n         * @inner\n         */\n        range: {\n            validate: function(value, pars) {\n                return typeof value === 'string' && value.length >= pars.min && value.length <= pars.max;\n            },\n            message: '{title} must be a minimum of {min} and a maximum of {max} characters',\n            expects: ['min', 'max']\n        },\n        /**\n         * Checks if a value is the same as the value of another.\n         * This test gets the value from a DOM &lt;input/&gt; element.\n         * @param {String} field - The id of the DOM &lt;input/&gt; element to test against.\n         * @example\n         * var rule = {\n         *     equal: 'password'\n         * };\n         * approve.value('some value', rule);\n         * @function equal\n         * @memberOf approve.tests\n         * @inner\n         */\n        equal: {\n            validate: function(value, pars) {\n                return '' + value === '' + pars.value;\n            },\n            message: '{title} must be equal to {field}',\n            expects: ['value', 'field']\n        },\n        /**\n         * Checks if a value passes a given regular expression.\n         * @param {RegExp} regex - The regular expression to test against. <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/RegExp\" target=\"_blank\">MDN</a>\n         * @example\n         * var rule = {\n         *     format: /^[A-Za-z0-9]+$/i\n         * };\n         * approve.value('some value', rule);\n         * @function format\n         * @memberOf approve.tests\n         * @inner\n         */\n        format: {\n            validate: function(value, pars) {\n                if (Object.prototype.toString.call(pars.regex) === '[object RegExp]') {\n                    return pars.regex.test(value);\n                }\n                throw 'approve.value(): [format] - regex is not a valid regular expression.';\n            },\n            message: '{title} did not pass the [{regex}] test',\n            expects: ['regex']\n        }\n    };\n\n    /** \n     * A helper function for formatting strings:\n     * @example\n     * this._format('i can speak {language} since i was {age}', {language:'javascript',age:10});\n     * @example\n     * this._format('i can speak {0} since i was {1}', 'javascript',10});\n     * @return {String} The formatted string.\n     * @memberOf approve\n     * @ignore\n     */\n    approve._format = function(text, col) {\n        col = typeof col === 'object' ? col : Array.prototype.slice.call(arguments, 1);\n        return text.replace(/\\{\\{|\\}\\}|\\{(\\w+)\\}/g, function (m, n) {\n            if (m === \"{{\") { return \"{\"; }\n            if (m === \"}}\") { return \"}\"; }\n            return col[n];\n        }).trim();\n    };\n\n    /** \n     * The start of the validation process:\n     * @example\n     * var result = this._start(value, rules);\n     * @param {Object} value - The value to test.\n     * @param {Object} rules - The object containing the test constraints.\n     * @return {Object} The result of the test.\n     * @memberOf approve\n     * @ignore\n     */\n    approve._start = function(value, rules) {\n        // Loop through given rules.\n        for (var rule in rules) {\n            if (rules.hasOwnProperty(rule) && rule !== 'title') {\n                // This is used to format the message with the value title.\n                var title = '',\n                    // Set a pointer to the current rule's constraint.\n                    constraint = rules[rule];\n                // Check if the rule has a title property?\n                if (rules.hasOwnProperty('title')) {\n                    title = rules.title;\n                }                \n                // Check if rule exists in tests.\n                if (this.tests.hasOwnProperty(rule)) {\n                    // Set a pointer to the current test.\n                    var params = {\n                        constraint: constraint,\n                        rule: rule,\n                        title: title,\n                        test: this.tests[rule],\n                        value: value\n                    };\n                    return this._test(params);\n                } else {\n                    throw 'approve.value(): ' + rule + ' test not defined.';\n                }\n            }\n        }\n    };\n\n    /** \n     * Performs the actual testing of the value and returns the result including any errors.\n     * @example\n     * var result = this._test(params);\n     * @param {Object} params - The parameters required for testing.\n     * @return {Object} The result of the test.\n     * @memberOf approve\n     * @ignore\n     */\n    approve._test = function(params) {\n        // Instantiate a new result object.\n        var result = new Result(),\n            // Create an args object for required parameters.\n            args = this._getArgs(params),\n            // Test the value.\n            ret = params.test.validate(params.value, args);\n        // Check if the returned value is an object.\n        if(typeof ret === 'object')\n        {\n            // An object was returned.\n            // Check if the test was successful.\n            result.approved = !ret.valid ? false : result.approved;\n            // Add the error messages returned by the resluting object.\n            result.errors = result.errors.concat(this._formatMessages(ret.errors, params));\n            // Merge any properties from the resulting object with the main result to be returned.\n            for (var prop in ret) {\n                if (ret.hasOwnProperty(prop)) {\n                    result[prop] = ret[prop];\n                }\n            }\n        } else if (typeof ret !== 'boolean') {\n            // We don't process if it's not a boolean or object.\n            throw 'approve.value(): ' + params.rule + ' returned an invalid value';\n        } else {\n            result.approved = !ret ? false : result.approved;\n        }\n        if (!result.approved) {\n            result.errors.push(this._formatMessage(params));\n        }\n        return result;\n    };\n\n    /** \n     * Helper method to loop over expected test parameters.\n     * @example\n     * this._eachExpected(params, function(expected) {\n     *     // Do something with expected.\n     * });\n     * @param {Object} params - The parameters required for testing.\n     * @param {Function} fn - The callback function called during loop.\n     * @return {Void}\n     * @memberOf approve\n     * @ignore\n     */\n    approve._eachExpected = function(params, fn) {\n        if (Array.isArray(params.test.expects)) {\n            var expectsLength = params.test.expects.length,\n                i = expectsLength;\n            // This test expects paramaters.\n            // Loop through the test's expected parameters and call the given function.\n            while (i--) {\n                fn(params.test.expects[i], expectsLength);\n            }\n        }\n    };\n\n    /** \n     * Returns an object containing the arguments for a test's expected parameters.\n     * @example\n     * var pars = this._getArgs(params);\n     * @param {Object} params - The parameters required for testing.\n     * @return {Object} The object containing the arguments.\n     * @memberOf approve\n     * @ignore\n     */\n    approve._getArgs = function(params) {\n        var pars = {};\n        // Does the test for this rule expect any paramaters?\n        this._eachExpected(params, function(expects, expectsLength) {\n            // Check if the rule object has the required parameter.\n            if (params.constraint.hasOwnProperty(expects)) {\n                // Add the expected parameter value to the pars object.\n                pars[expects] = params.constraint[expects];\n            } else if (expectsLength <= 1 && /^[A-Za-z0-9]+$/i.test(params.constraint)) {\n                // Set the parameter to the rule's value.\n                pars[expects] = params.constraint;      \n            } else {\n                throw 'approve.value(): ' + params.rule + ' expects the ' + expects + ' parameter.';\n            }\n        });\n        \n        // Does the rule have config?\n        if (params.constraint.hasOwnProperty('config')) {\n            // Add the config to the pars object.\n            pars.config = params.constraint.config;\n        }\n        // Return the parameters object\n        return pars;\n    };\n\n    /**\n     * Returns an object containing placholder values to correctly format an error message.\n     * @example\n     * var format = this._getFormat(params);\n     * @param {Object} params - The parameters required for testing.\n     * @return {Object} The object used to format an error message.\n     * @memberOf approve\n     * @ignore\n     */\n    approve._getFormat = function(params) {\n        var format = {};\n        // Does the test for the rule expect parameters?\n        this._eachExpected(params, function(expects) {\n            // Check if the rule object has the required parameter.\n            if (params.constraint.hasOwnProperty(expects)) {\n                // Add the expected parameter's format to the parameter value.\n                format[expects] = params.constraint[expects];\n            }\n            // Expected parameter not present, is the constraint formattable?\n            if (/^[A-Za-z0-9]+$/i.test(params.constraint)) {\n                format[expects] = params.constraint;\n            }\n        });\n        format.title = params.title;\n        // Return the formatted message.\n        return format;\n    };\n\n    /**\n     * Returns an array of formatted error messages returned by tests that return objects instead of booleans.\n     * @example\n     * var errors = this._formatMessages(['array', 'of', 'errors'], params);\n     * @param {Array} errors - The array of unformatted errors returned by the test's result.\n     * @param {Object} params - The parameters required for testing.\n     * @return {Array} The formatted errors\n     * @memberOf approve\n     * @ignore\n     */\n    approve._formatMessages = function(errors, params) {\n        var format = this._getFormat(params),\n            i = errors.length;\n        while (i--) {\n            errors[i] = this._format(errors[i], format);\n        }\n        return errors;  \n    };\n\n    /**\n     * Returns the correctly formatted message representing the current test's failure.\n     * @example\n     * this._message(rule, rules, title);\n     * @param {Object} params - The parameters required for testing.\n     * @return {String} The correctly formatted error message\n     * @memberOf approve\n     * @ignore\n     */\n    approve._formatMessage = function(params) {\n        var format = this._getFormat(params);\n        var message;\n\n        // Does the provided rule have a custom message?\n        if (params.constraint.hasOwnProperty('message')) {\n            // The rule has a custom message, return it.\n            message = params.constraint.message;\n            return this._format(message, format);\n        }\n        else {\n            // The rule does not have a custom message.\n            // Get the default message from the tests.\n            message = params.test.message;\n            return this._format(message, format);\n        }        \n    };\n\n    /**\n     * Executes the tests based on given rules to validate a given value.<br><br>\n     * Returns an object with at least two properties:<br>\n     * <code>approved</code> : Boolean - <code>true</code> if test succeeded, otherwise <code>false</code>.<br>\n     * <code>errors</code> : Array of String - holds a list of formatted errors.\n     * @example\n     * var result = approve.value('some value', {test: constraints});\n     * if (result.approved) {\n     *    // Value is approved - do something\n     * } else {\n     *    // Do something with the errors\n     *    result.each(function(error) {\n     *       console.log(error);\n     *    });\n     * }\n     * @param {Object} value - The value to test against the rules.\n     * @param {Object} rules - The constraints for the value being tested.\n     * @return {Object} The object containing the result of the tests performed.\n     * @memberOf approve\n     */\n    approve.value = function(value, rules) {\n\n        // If rules is not an object, we cannot continue.\n        if (typeof rules !== 'object') {\n            throw 'approve.value(value, rules): rules is not a valid object.';\n        }\n        // Return the result object.\n        return this._start(value, rules);\n    };\n\n    /**\n     * Used to add custom tests.\n     * @example\n     * var test = {\n     *    expects: false,\n     *    message: '{title} did not pass the test.',\n     *    validate: function(value) {\n     *        return this.strength(value);\n     *    },\n     * };\n     * approve.addTest(test, 'test_name');\n     * @param {Object} obj - The test object to add.\n     * @param {String} name - The name of the test.\n     * @return void\n     * @memberOf approve\n     */\n    approve.addTest = function(obj, name) {\n        // If obj is not a valid object, we cannot continue.\n        if (typeof obj !== 'object') {\n            throw 'approve.addTest(obj, name): obj is not a valid object.';\n        }\n        try {\n            // Check if the test name already exists.\n            if (!this.tests.hasOwnProperty(name)) {\n                // The name does not exist, add it to the tests.\n                this.tests[name] = obj;\n            }\n        } catch (e) {\n            throw 'approve.addTest(): ' + e.message;\n        }\n    };\n\n    /**\n     * The result object containing the outcome of the strength test.\n     * @param {string} message - The initial strength message.\n     * @param {integer} min - The minimum length.\n     * @param {integer} bonus - The minimum length before earning a bonus point.\n     */\n    function Score(strength) {\n        this.strength = strength;\n        this.points = 0;\n        this.isMinimum = false;\n        this.hasLower = false;\n        this.hasUpper = false;\n        this.hasNumber = false;\n        this.hasSpecial = false;\n        this.isBonus = false;\n        this.percent = 0;\n        this.valid = false;\n        this.errors = [];\n    }\n    /** \n     * Checks if a value is a strong password string.\n     * @example\n     * var rule = {\n     *     strength: {\n     *         min: 8,\n     *         bonus: 10\n     *     }\n     * };\n     * approve.value('some value', rule);\n     * @return {Object} An object with various properties relating to the value's score.\n     * @function strength\n     * @memberOf approve.tests\n     * @inner\n     */\n    var strength = {\n        /**\n         * The minimum length a password must be.\n         */\n        minimum: 8,\n        /**\n         * The minimum length a password must be for a bonus point.\n         */\n        minimumBonus: 10,\n        /**\n         * The text representing the strength of a password.\n         */\n        strengths: {\n            0: 'Very Weak',\n            1: 'Weak',\n            2: 'Better',\n            3: 'Almost',\n            4: 'Acceptable',\n            5: 'Strong',\n            6: 'Very Strong'\n        },\n        /**\n         * The default error message.\n         */\n        message: '{title} did not pass the strength test.',\n        /**\n         * Expects the 'min' and 'bonus' parameters.\n         */\n        expects: ['min', 'bonus'],\n        /**\n         * Default error messages\n         * @type {Object}\n         */\n        errors: {\n            isMinimum: '{title} must be at least {min} characters',\n            hasLower: '{title} must have at least 1 lower case character',\n            hasUpper: '{title} must have at least 1 upper case character',\n            hasNumber: '{title} must have at least 1 number',\n            hasSpecial: '{title} must have at least 1 special character'\n        },\n        /**\n         * Returns an object containing the score of a value.\n         * @param {String} text - The text to score.\n         * @return {Object} The score of the text.\n         */\n        score: function(text) {\n            // Create the object that represents the score of the text\n            var result = new Score(this.strengths[0]);\n            // If text is longer than minimum give 1 point.\n            // If text is longer than minimumBonus give another 1 point.\n            if (text.length > this.minimumBonus) {\n                result.points += 2;\n                result.isBonus = true;\n                result.isMinimum = true;\n            } else if (text.length > this.minimum){\n                result.points++;\n                result.isMinimum = true;\n            } else {\n                result.points = 1;\n                result.isMinimum = false;\n            }\n            // If text has lowercase characters give 1 point.\n            result.hasLower = text.match(/[a-z]/);\n            if(result.isMinimum) {\n                result.points++;\n            }\n            // If text has uppercase characters give 1 point.\n            result.hasUpper = text.match(/[A-Z]/);\n            if(result.isMinimum) {\n                result.points++;\n            }\n            // If text has at least one number give 1 point.\n            result.hasNumber = text.match(/\\d+/);\n            if(result.isMinimum) {\n                result.points++;\n            }\n            // If text has at least one special caracther give 1 point.\n            result.hasSpecial = text.match(/.[!,@,#,$,%,^,&,*,?,_,~,-,(,)]/);\n            if(result.isMinimum) {\n                result.points++;\n            }\n            // Set the percentage value.\n            result.percent = Math.ceil((result.points / 6) * 100);\n            // Return the score object.\n            return result;\n        },\n        /**\n         * Returns an object containing the score and validation of a value.\n         * @param {String} text - The text to score.\n         * @return {Object} The score and validation of the text.\n         */\n        strength: function (text) {\n            var result = this.score(text);\n            result.strength = this.strengths[result.points];\n            if (!result.isMinimum) {\n                result.errors.push(this.errors.isMinimum);\n            }\n            if (!result.hasLower) {\n                result.errors.push(this.errors.hasLower);\n            }\n            if (!result.hasUpper) {\n                result.errors.push(this.errors.hasUpper);\n            }\n            if (!result.hasSpecial) {\n                result.errors.push(this.errors.hasSpecial);\n            }\n            if (!result.hasNumber) {\n                result.errors.push(this.errors.hasNumber);\n            }\n            if (result.points > 4) {\n              result.valid = true;\n            } \n            return result;\n        },\n        /**\n         * The method that is called by ApproveJs to perform the test.\n         * @param {String} value - The value to test.\n         * @return {Object} The result object of the test.\n         */\n        validate: function(value, pars) {\n            this.minimum = pars.min || this.minimum;\n            this.minimumBonus = pars.bonus || this.minimumBonus;\n            if (pars.hasOwnProperty('config') && pars.config.hasOwnProperty('messages')) {\n                for (var message in pars.config.messages) {\n                    if (pars.config.messages.hasOwnProperty(message)) {\n                        this.errors[message] = pars.config.messages[message];\n                    }\n                }\n            }\n            return this.strength(value);\n        },\n    };\n    approve.tests.strength = strength;\n\n    /*\n     * Return the main ApproveJs object.\n     */\n    return approve;\n}));"],"sourceRoot":"/source/"}